#!/usr/bin/python3

"""
Description: Churro frontend + driver
Author: Caian Benedicto
Version: 0.8
"""

import sys, re, argparse
import Runtime.debug, Runtime.release

def dprint(x):
    pass
    #print(x)

class srcfile:
    def __init__(self, filename):
        self.f = open(filename, 'rt')
        self.line = 1

    def read_one(self):
        c = self.f.read(1)
        if c == '\n':
            self.line = self.line + 1
        return c

    def get_line(self):
        return self.line

    def close(self):
        self.f.close()


def getChurro(stream):
    while True:
        c = stream.read_one()
        if c == '{':
            break
        elif c == '':
            return True
    dprint('Found a churro!')
    c = stream.read_one()
    if c == 'o':
        dprint('It is a left unfilled churro!')
        if stream.read_one() != '}':
            print('Malformed churro!!')
            return False
        n = 0
        while True:
            c = stream.read_one()
            if c == '=':
                n = n+1
            elif c == '}':
                break
            else:
                print('Malformed churro!!')
                return False
        dprint('Its size is ' + str(n) + '!')
        return ('lu', n)
    elif c == '*':
        dprint('It is a left filled churro!')
        if stream.read_one() != '}':
            print('Malformed churro!!')
            return False
        n = 0
        while True:
            c = stream.read_one()
            if c == '=':
                n = n+1
            elif c == '}':
                break
            else:
                print('Malformed churro!!')
                return False
        dprint('Its size is ' + str(n) + '!')
        return ('lf', n)
    elif c == '=':
        dprint('It is a right churro!')
        n = 1
        while True:
            c = stream.read_one()
            if c != '=':
                break
            n = n+1
        dprint('Its size is ' + str(n))
        if c != '{':
            print('Malformed churro!!')
            return False
        c = stream.read_one()
        if c == 'o':
            dprint('It is unfilled!')
            f = 'ru'
        elif c == '*':
            dprint('It is filled!')
            f = 'rf'
        else:
            print('Malformed churro!!')
            return False
        if stream.read_one() != '}':
            print('Malformed churro!!')
            return False
        return (f, n)
    elif c == '{':
        c = stream.read_one()
        if stream.read_one() != '}':
            print('Malformed churro!!')
            return False
        if c == 'o':
            dprint('It is a tiny right unfilled churro!')
            return ('ru', 0)
        elif c == '*':
            dprint('It is a tiny right filled churro!')
            return ('rf', 0)
    else:
        print('Malformed churro!!')
        return False


llvm_counter = 0
def getreg():
    global llvm_counter
    llvm_counter += 1
    return '%r' + str(llvm_counter)


llvm_tlast = ''
llvm_tcounter = 1
def gettlabel():
    global llvm_tcounter
    llvm_tcounter += 1
    return 't' + str(llvm_tcounter)


llvm_qlast = ''
llvm_qcounter = 1
def getqlabel():
    global llvm_qcounter
    llvm_qcounter += 1
    return 'q' + str(llvm_qcounter)


def mkinst(c):
    global llvm_tlast
    global llvm_qlast
    ############################################################
    if c[0] == 'lu':
        return 'call void @__push(i32 ' + str(c[1]) + ')'
    ############################################################
    elif c[0] == 'lf':
        return 'call void @__push(i32 -' + str(c[1]) + ')'
    ############################################################
    elif c[0] == 'ru':
        if c[1] == 0: # pop A; discard A
            return 'call i32 @__pop()'
        elif c[1] == 1: # pop A, B; push (B + A)
            r1 = getreg()
            r2 = getreg()
            r3 = getreg()
            return r1 + ' = call i32 @__pop()\n' + r2 + ' = call i32 @__pop()\n' + r3 + ' = add i32 ' + r1 + ', ' + r2 + '\ncall void @__push(i32 ' + r3 + ')'
        elif c[1] == 2: # pop A, B; push (B - A)
            r1 = getreg()
            r2 = getreg()
            r3 = getreg()
            return r1 + ' = call i32 @__pop()\n' + r2 + ' = call i32 @__pop()\n' + r3 + ' = sub i32 ' + r1 + ', ' + r2 + '\ncall void @__push(i32 ' + r3 + ')'
        elif c[1] == 3: # pop A; if A = 0, jump to churro after next occurence of {===={o}
            if llvm_qlast == '':
                llvm_qlast = getqlabel()
            llvm_tlast = gettlabel()
            r1 = getreg()
            r2 = getreg()
            return r1 + ' = call i32 @__pop()\n' + r2 + ' = icmp eq i32 ' + r1 + ', 0\nbr i1 ' + r2 + ', label %' + llvm_qlast + ', label %' + llvm_tlast + '\r' + llvm_tlast + ':'
        elif c[1] == 4: # pop A; if A != 0, jump to churro after last occurence of {==={o}
            if llvm_tlast == '' or llvm_qlast == '':
                print('Unmatched {===={o} churro!!')
                return False
            r1 = getreg()
            r2 = getreg()
            i = r1 + ' = call i32 @__pop()\n' + r2 + ' = icmp ne i32 ' + r1 + ', 0\nbr i1 ' + r2 + ', label %' + llvm_tlast + ', label %' + llvm_qlast + '\r' + llvm_qlast + ':'
            llvm_qlast = ''
            return i
        elif c[1] == 5: # pop A, B; store B in memory location A
            r1 = getreg()
            r2 = getreg()
            return r1 + ' = call i32 @__pop()\n' + r2 + ' = call i32 @__pop()\ncall void @__writem(i32 ' + r1 + ', i32 ' + r2 + ')'
        elif c[1] == 6: # pop A; push the value in memory location A to stack
            r1 = getreg()
            r2 = getreg()
            return r1 + ' = call i32 @__pop()\n' + r2 + ' = call i32 @__readm(i32 ' + r1 + ')\ncall void @__push(i32 ' + r2 + ')'
        elif c[1] == 7: # pop A; print A as an integer
            r1 = getreg()
            return r1 + ' = call i32 @__pop()\ncall void @__printi(i32 ' + r1 + ')'
        elif c[1] == 8: # pop A; print A as an ASCII character
            r1 = getreg()
            return r1 + ' = call i32 @__pop()\ncall void @__printc(i32 ' + r1 + ')'
        elif c[1] == 9: # read a single character from stdin and push it to the stack
            r1 = getreg()
            return r1 + ' = call i32 @__readc()\ncall void @__push(i32 ' + r1 + ')'
        elif c[1] == 10: # exit the program
            return 'ret 0'
    ############################################################
    elif c[0] == 'rf':
        if c[1] == 0: # peek A; discard A
            return 'call i32 @__peek()'
        elif c[1] == 1: # peek A, B; push (B + A)
            r1 = getreg()
            r2 = getreg()
            r3 = getreg()
            return r1 + ' = call i32 @__peek()\n' + r2 + ' = call i32 @__peek()\n' + r3 + ' = add i32 ' + r1 + ', ' + r2 + '\ncall void @__push(i32 ' + r3 + ')'
        elif c[1] == 2: # peek A, B; push (B - A)
            r1 = getreg()
            r2 = getreg()
            r3 = getreg()
            return r1 + ' = call i32 @__peek()\n' + r2 + ' = call i32 @__peek()\n' + r3 + ' = sub i32 ' + r1 + ', ' + r2 + '\ncall void @__push(i32 ' + r3 + ')'
        elif c[1] == 3: # peek A; if A = 0, jump to churro after next occurence of {===={o}
            if llvm_qlast == '':
                llvm_qlast = getqlabel()
            llvm_tlast = gettlabel()
            r1 = getreg()
            r2 = getreg()
            return r1 + ' = call i32 @__peek()\n' + r2 + ' = icmp eq i32 ' + r1 + ', 0\nbr i1 ' + r2 + ', label %' + llvm_qlast + ', label %' + llvm_tlast + '\r' + llvm_tlast + ':'
        elif c[1] == 4: # peek A; if A != 0, jump to churro after last occurence of {==={o}
            if llvm_tlast == '' or llvm_qlast == '':
                print('Unmatched {===={*} churro!!')
                return False
            r1 = getreg()
            r2 = getreg()
            i = r1 + ' = call i32 @__peek()\n' + r2 + ' = icmp ne i32 ' + r1 + ', 0\nbr i1 ' + r2 + ', label %' + llvm_tlast + ', label %' + llvm_qlast + '\r' + llvm_qlast + ':'
            llvm_qlast = ''
            return i
        elif c[1] == 5: # peek A, B; store B in memory location A
            r1 = getreg()
            r2 = getreg()
            return r1 + ' = call i32 @__peek()\n' + r2 + ' = call i32 @__peek()\ncall void @__writem(i32 ' + r1 + ', i32 ' + r2 + ')'
        elif c[1] == 6: # peek A; push the value in memory location A to stack
            r1 = getreg()
            r2 = getreg()
            return r1 + ' = call i32 @__peek()\n' + r2 + ' = call i32 @__readm(i32 ' + r1 + ')\ncall void @__push(i32 ' + r2 + ')'
        elif c[1] == 7: # peek A; print A as an integer
            r1 = getreg()
            return r1 + ' = call i32 @__peek()\ncall void @__printi(i32 ' + r1 + ')'
        elif c[1] == 8: # peek A; print A as an ASCII character
            r1 = getreg()
            return r1 + ' = call i32 @__peek()\ncall void @__printc(i32 ' + r1 + ')'
        elif c[1] == 9: # read a single character from stdin and push it to the stack
            r1 = getreg()
            return r1 + ' = call i32 @__readc()\ncall void @__push(i32 ' + r1 + ')'
        elif c[1] == 10: # exit the program
            return 'ret 0'
    #invalid instruction
    print('Invalid churro:', c)
    return ''


def main():
    # Argument parsing
    parser = argparse.ArgumentParser(description='The Churro language frontend for LLVM.')
    parser.add_argument('-o', metavar='<file>', dest='output', type=str, 
            default='',
            help='Output file')
    parser.add_argument('-S', dest='assembler', action='store_true', 
            default=False, 
            help='Only run preprocess and compilation steps')
    parser.add_argument('-emit-llvm', dest='llvm', action='store_true', 
            default=False,
            help='Use the LLVM representation for assembler and object files')
    parser.add_argument('-save-temps', dest='temps',  action='store_true', 
            default=False,
            help='Save intermediate compilation results')
    #TODO: Implement -c
    #parser.add_argument('-c', action='store_true', default=False,
    #        help='Treat subsequent input files as having type')
    parser.add_argument('-g', dest='debug', action='store_true', default=False,
            help='Generate runtime debug verbose')
    parser.add_argument('-O', dest='opt', type=int, default=0,
            help='Optimization level 0-4')
    lopts = parser.parse_args()

    print(lopts.o0)

    exit(1)
    # Source listing
    if len(lopts.sources) == 0:
        print('No input files!');
        exit(1)
    elif len(lopts.sources) > 1:
        print('Only one source input is accepted!')
        exit(1)
    fin = lopts.sources[0]
    # Source type processing
    fname = ''
    stage = -1
    if lopts.intype == '': # Guess from file type
        if re.match(r'.ch$', fin) != None:
            fname = re.sub(r'(\.ch$)|(.*/)', '', fin)
            stage = 0 # 0 - .ch -> .ll
        elif re.match(r'.ll$', fin) != None:
            fname = re.sub(r'(\.ll$)|(.*/)', '', fin)
            stage = 1 # 1 - .ll -> .s
        elif re.match(r'.s$', fin) != None:
            fname = re.sub(r'(\.s$)|(.*/)', '', fin)
            stage = 2 # 2 = .s  -> binary
    elif lopts.intype == 'churro':
        fname = re.sub(r'(\.ch$)|(.*/)', '', fin)
        stage = 0 # 0 - .ch -> .ll
    elif lopts.intype == 'llvm':
        fname = re.sub(r'(\.ll$)|(.*/)', '', fin)
        stage = 1 # 1 - .ll -> .s
    elif lopts.intype == 'source':
        fname = re.sub(r'(\.s$)|(.*/)', '', fin)
        stage = 2 # 2 = .s  -> binary
    else:
        print("Unsupported input format '" + lopts.intype + "'")
        exit(1)
    # Output selection
    fout = ''
    if lopts.assembly:
        genexe = False
        genllvm = lopts.llvm
        gennative = not lopts.llvm
    else:
        genexe = True
        if lopts.llvm:
            print('Option not used: -emit-llvm')

    if lopts.output != '':
        fout = lopts.output
    # Runtime selection
    if lopts.debug:
        llvm_pre1 = Runtime.debug.llvm_pre1
        llvm_pre2 = Runtime.debug.llvm_pre2
        llvm_post = Runtime.debug.llvm_post
    else:
        llvm_pre1 = Runtime.release.llvm_pre1
        llvm_pre2 = Runtime.release.llvm_pre2
        llvm_post = Runtime.release.llvm_post
    fsrc = srcfile(sys.argv[1])
    #TODO: add -o control
    #TODO: output to string
    #TODO: add -S control
    #TODO: add -emit-llvm control
    #TODO: add optimization control
    #TODO: add final compilation steps
    #if lopts.out 
    fdest = re.sub(r'(\.ch$)|(.*/)', '', sys.argv[1]) + '.ll'
    fdest = open(fdest, 'wt')
    fdest.write(llvm_pre1)
    fdest.write(re.sub(r'^.*/', '', sys.argv[1]))
    fdest.write(llvm_pre2)
    while True:
        c = getChurro(fsrc)
        if c == True:
            break
        elif c == False:
            print('Compilation Error at line ' + str(fsrc.get_line()) + '!!')
            exit()
        else:
            i = mkinst(c)
            if i == False:
                print('Compilation Error at line ' + str(fsrc.get_line()) + '!!')
                exit()
            i = '    ' + i.replace('\n', '\n    ').replace('\r', '\n')
            fdest.write(i + '\n')
    fsrc.close()
    fdest.write(llvm_post)
    fdest.close()


if __name__=="__main__":
    main()
